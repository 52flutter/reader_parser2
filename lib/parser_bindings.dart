// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as f2;

class EVParser {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  EVParser(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  EVParser.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_start_ptr =
      _lookup<ffi.NativeFunction<_c___va_start>>('__va_start');
  late final _dart___va_start ___va_start =
      ___va_start_ptr.asFunction<_dart___va_start>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookie_ptr =
      _lookup<ffi.NativeFunction<_c___security_init_cookie>>(
          '__security_init_cookie');
  late final _dart___security_init_cookie ___security_init_cookie =
      ___security_init_cookie_ptr.asFunction<_dart___security_init_cookie>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookie_ptr =
      _lookup<ffi.NativeFunction<_c___security_check_cookie>>(
          '__security_check_cookie');
  late final _dart___security_check_cookie ___security_check_cookie =
      ___security_check_cookie_ptr.asFunction<_dart___security_check_cookie>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailure_ptr =
      _lookup<ffi.NativeFunction<_c___report_gsfailure>>('__report_gsfailure');
  late final _dart___report_gsfailure ___report_gsfailure =
      ___report_gsfailure_ptr.asFunction<_dart___report_gsfailure>();

  late final ffi.Pointer<ffi.Uint64> ___security_cookie =
      _lookup<ffi.Uint64>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfo_ptr =
      _lookup<ffi.NativeFunction<_c__invalid_parameter_noinfo>>(
          '_invalid_parameter_noinfo');
  late final _dart__invalid_parameter_noinfo __invalid_parameter_noinfo =
      __invalid_parameter_noinfo_ptr
          .asFunction<_dart__invalid_parameter_noinfo>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturn_ptr =
      _lookup<ffi.NativeFunction<_c__invalid_parameter_noinfo_noreturn>>(
          '_invalid_parameter_noinfo_noreturn');
  late final _dart__invalid_parameter_noinfo_noreturn
      __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturn_ptr
          .asFunction<_dart__invalid_parameter_noinfo_noreturn>();

  void _invoke_watson(
    ffi.Pointer<ffi.Uint16> _Expression,
    ffi.Pointer<ffi.Uint16> _FunctionName,
    ffi.Pointer<ffi.Uint16> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watson_ptr =
      _lookup<ffi.NativeFunction<_c__invoke_watson>>('_invoke_watson');
  late final _dart__invoke_watson __invoke_watson =
      __invoke_watson_ptr.asFunction<_dart__invoke_watson>();

  ffi.Pointer<ffi.Int32> _errno() {
    return __errno();
  }

  late final __errno_ptr = _lookup<ffi.NativeFunction<_c__errno>>('_errno');
  late final _dart__errno __errno = __errno_ptr.asFunction<_dart__errno>();

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errno_ptr =
      _lookup<ffi.NativeFunction<_c__set_errno>>('_set_errno');
  late final _dart__set_errno __set_errno =
      __set_errno_ptr.asFunction<_dart__set_errno>();

  int _get_errno(
    ffi.Pointer<ffi.Int32> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errno_ptr =
      _lookup<ffi.NativeFunction<_c__get_errno>>('_get_errno');
  late final _dart__get_errno __get_errno =
      __get_errno_ptr.asFunction<_dart__get_errno>();

  int __threadid() {
    return ___threadid();
  }

  late final ___threadid_ptr =
      _lookup<ffi.NativeFunction<_c___threadid>>('__threadid');
  late final _dart___threadid ___threadid =
      ___threadid_ptr.asFunction<_dart___threadid>();

  int __threadhandle() {
    return ___threadhandle();
  }

  late final ___threadhandle_ptr =
      _lookup<ffi.NativeFunction<_c___threadhandle>>('__threadhandle');
  late final _dart___threadhandle ___threadhandle =
      ___threadhandle_ptr.asFunction<_dart___threadhandle>();

  ffi.Pointer<f2.Utf8> StartTransaction(
    ffi.Pointer<f2.Utf8> inputString,
  ) {
    return _StartTransaction(
      inputString,
    );
  }

  late final _StartTransaction_ptr =
      _lookup<ffi.NativeFunction<_c_StartTransaction>>('StartTransaction');
  late final _dart_StartTransaction _StartTransaction =
      _StartTransaction_ptr.asFunction<_dart_StartTransaction>();

  ffi.Pointer<f2.Utf8> ParseRuleRaw(
    ffi.Pointer<f2.Utf8> tId,
    ffi.Pointer<f2.Utf8> rule,
  ) {
    return _ParseRuleRaw(
      tId,
      rule,
    );
  }

  late final _ParseRuleRaw_ptr =
      _lookup<ffi.NativeFunction<_c_ParseRuleRaw>>('ParseRuleRaw');
  late final _dart_ParseRuleRaw _ParseRuleRaw =
      _ParseRuleRaw_ptr.asFunction<_dart_ParseRuleRaw>();

  ffi.Pointer<ffi.Pointer<f2.Utf8>> ParseRuleStr(
    ffi.Pointer<f2.Utf8> tId,
    ffi.Pointer<f2.Utf8> rule,
  ) {
    return _ParseRuleStr(
      tId,
      rule,
    );
  }

  late final _ParseRuleStr_ptr =
      _lookup<ffi.NativeFunction<_c_ParseRuleStr>>('ParseRuleStr');
  late final _dart_ParseRuleStr _ParseRuleStr =
      _ParseRuleStr_ptr.asFunction<_dart_ParseRuleStr>();

  ffi.Pointer<ffi.Pointer<f2.Utf8>> ParseRuleStrForParent(
    ffi.Pointer<f2.Utf8> tId,
    ffi.Pointer<f2.Utf8> rule,
    int index,
  ) {
    return _ParseRuleStrForParent(
      tId,
      rule,
      index,
    );
  }

  late final _ParseRuleStrForParent_ptr =
      _lookup<ffi.NativeFunction<_c_ParseRuleStrForParent>>(
          'ParseRuleStrForParent');
  late final _dart_ParseRuleStrForParent _ParseRuleStrForParent =
      _ParseRuleStrForParent_ptr.asFunction<_dart_ParseRuleStrForParent>();

  int QueryBatchResultSize(
    ffi.Pointer<f2.Utf8> tId,
  ) {
    return _QueryBatchResultSize(
      tId,
    );
  }

  late final _QueryBatchResultSize_ptr =
      _lookup<ffi.NativeFunction<_c_QueryBatchResultSize>>(
          'QueryBatchResultSize');
  late final _dart_QueryBatchResultSize _QueryBatchResultSize =
      _QueryBatchResultSize_ptr.asFunction<_dart_QueryBatchResultSize>();

  void EndTransaction(
    ffi.Pointer<f2.Utf8> tId,
  ) {
    return _EndTransaction(
      tId,
    );
  }

  late final _EndTransaction_ptr =
      _lookup<ffi.NativeFunction<_c_EndTransaction>>('EndTransaction');
  late final _dart_EndTransaction _EndTransaction =
      _EndTransaction_ptr.asFunction<_dart_EndTransaction>();


  void FreeStr(ffi.Pointer pointer){
    return _FreeStr(pointer);
  }

  late final _FreeStr_ptr =
  _lookup<ffi.NativeFunction<_c_FreeStr>>('FreeStr');
  late final _dart_FreeStr _FreeStr =
  _FreeStr_ptr.asFunction<_dart_FreeStr>();
}

class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> _locale_pctype;

  @ffi.Int32()
  external int _locale_mb_cur_max;

  @ffi.Uint32()
  external int _locale_lc_codepage;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class _Mbstatet extends ffi.Struct {
  @ffi.Uint64()
  external int _Wchar;

  @ffi.Uint16()
  external int _Byte;

  @ffi.Uint16()
  external int _State;
}

class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> p;

  @ffi.Int64()
  external int n;
}

class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int64()
  external int len;

  @ffi.Int64()
  external int cap;
}

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 't';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

typedef _c___va_start = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart___va_start = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c___security_init_cookie = ffi.Void Function();

typedef _dart___security_init_cookie = void Function();

typedef _c___security_check_cookie = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___security_check_cookie = void Function(
  int _StackCookie,
);

typedef _c___report_gsfailure = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___report_gsfailure = void Function(
  int _StackCookie,
);

typedef _c__invalid_parameter_noinfo = ffi.Void Function();

typedef _dart__invalid_parameter_noinfo = void Function();

typedef _c__invalid_parameter_noinfo_noreturn = ffi.Void Function();

typedef _dart__invalid_parameter_noinfo_noreturn = void Function();

typedef _c__invoke_watson = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _Expression,
  ffi.Pointer<ffi.Uint16> _FunctionName,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Uint32 _LineNo,
  ffi.Uint64 _Reserved,
);

typedef _dart__invoke_watson = void Function(
  ffi.Pointer<ffi.Uint16> _Expression,
  ffi.Pointer<ffi.Uint16> _FunctionName,
  ffi.Pointer<ffi.Uint16> _FileName,
  int _LineNo,
  int _Reserved,
);

typedef _c__errno = ffi.Pointer<ffi.Int32> Function();

typedef _dart__errno = ffi.Pointer<ffi.Int32> Function();

typedef _c__set_errno = ffi.Int32 Function(
  ffi.Int32 _Value,
);

typedef _dart__set_errno = int Function(
  int _Value,
);

typedef _c__get_errno = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Value,
);

typedef _dart__get_errno = int Function(
  ffi.Pointer<ffi.Int32> _Value,
);

typedef _c___threadid = ffi.Uint64 Function();

typedef _dart___threadid = int Function();

typedef _c___threadhandle = ffi.Uint64 Function();

typedef _dart___threadhandle = int Function();

typedef _c_StartTransaction = ffi.Pointer<f2.Utf8> Function(
  ffi.Pointer<f2.Utf8> inputString,
);

typedef _dart_StartTransaction = ffi.Pointer<f2.Utf8> Function(
  ffi.Pointer<f2.Utf8> inputString,
);

typedef _c_ParseRuleRaw = ffi.Pointer<f2.Utf8> Function(
  ffi.Pointer<f2.Utf8> tId,
  ffi.Pointer<f2.Utf8> rule,
);

typedef _dart_ParseRuleRaw = ffi.Pointer<f2.Utf8> Function(
  ffi.Pointer<f2.Utf8> tId,
  ffi.Pointer<f2.Utf8> rule,
);

typedef _c_ParseRuleStr = ffi.Pointer<ffi.Pointer<f2.Utf8>> Function(
  ffi.Pointer<f2.Utf8> tId,
  ffi.Pointer<f2.Utf8> rule,
);

typedef _dart_ParseRuleStr = ffi.Pointer<ffi.Pointer<f2.Utf8>> Function(
  ffi.Pointer<f2.Utf8> tId,
  ffi.Pointer<f2.Utf8> rule,
);

typedef _c_ParseRuleStrForParent = ffi.Pointer<ffi.Pointer<f2.Utf8>> Function(
  ffi.Pointer<f2.Utf8> tId,
  ffi.Pointer<f2.Utf8> rule,
  ffi.Int64 index,
);

typedef _dart_ParseRuleStrForParent = ffi.Pointer<ffi.Pointer<f2.Utf8>> Function(
  ffi.Pointer<f2.Utf8> tId,
  ffi.Pointer<f2.Utf8> rule,
  int index,
);

typedef _c_QueryBatchResultSize = ffi.Int64 Function(
  ffi.Pointer<f2.Utf8> tId,
);

typedef _dart_QueryBatchResultSize = int Function(
  ffi.Pointer<f2.Utf8> tId,
);

typedef _c_EndTransaction = ffi.Void Function(
  ffi.Pointer<f2.Utf8> tId,
);

typedef _dart_EndTransaction = void Function(
  ffi.Pointer<f2.Utf8> tId,
);

typedef _c_FreeStr = ffi.Void Function(
    ffi.Pointer pointer,
    );

typedef _dart_FreeStr = void Function(
    ffi.Pointer pointer,
    );
